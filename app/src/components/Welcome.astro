---
import astroLogo from '../assets/astro.svg';
import Header from './Header.astro';
import Footer from './Footer.astro'
---
<style>
  .custom-shadow-all {
    box-shadow: 0px 0px 16px 4px rgba(0, 255, 255, 0.7); /* Azul celeste */
  }
</style>
<div id="container">

<main class="max-w-[100%] sm:max-w-[80%] lg:max-w-[60%]">
  <section id="hero" class="flex flex-col justiy-center items-center">
    <img src={astroLogo.src} width="200" height="150" alt="Astro Logo" id="logo" class="m-[3%] mt-[-5%]"/>
    <h1 class="p-[0%]">Â¡Estamos construyendo algo emocionante!</h2>
    <div class="flex flex-col w-[100%] items-center justiy-center"><a href="https://github.com/thecodeofyamid/codealchemyhub" target="_blank" class="block w-[80%] bg-[#070707] p-[2%] rounded-xl mt-[5%] text-red-600 hover:bg-white custom-shadow-all text-lg hover:font-bold">ðŸ“¢ Mantente atento a las novedades </a></div >
		</section>
  </main>

</div>

<canvas id="background"></canvas>

<style>
	/* Fondo del canvas */
	#background {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		z-index: -1;
		background: #090909;
	}

	/* Contenedor principal */
	#container {
		font-family: Inter, Roboto, 'Helvetica Neue', Arial, sans-serif;
		height: 100vh;
		display: flex;
		justify-content: center;
		align-items: center;
		text-align: center;
		flex-direction: column;
		backdrop-filter: blur(10px);
	}

	/* Logo */
	#logo {
		margin-bottom: 20px;
	}

	/* Encabezado */
	h1 {
		font-size: 2rem;
		color: white;
		margin-bottom: 10px;
	}

	/* Mensaje */
  a{
    font-size: 1.2rem;
    color: white;
  }

  a:hover{
    color: red;
  }

	/* Media Queries */
	@media screen and (max-width: 768px) {
		#logo {
			margin-bottom: 15px;
		}

		h1 {
      font-size: 1.75rem;
      padding: 2%;
		}

    a {
			font-size: 1.1rem;
		}
	}

	@media screen and (max-width: 480px) {
		#logo {
			margin-bottom: 10px;
		}

		h1 {
      font-size: 1.5rem;
      padding: 2%;
		}

    a {
			font-size: 1rem;
		}
	}
</style>

<script>
	const canvas = document.getElementById("background") as HTMLCanvasElement;
	const ctx = canvas.getContext("2d")!;

	canvas.width = window.innerWidth;
	canvas.height = window.innerHeight;

	// DefiniciÃ³n del tipo de estrella
	interface Star {
		x: number;
		y: number;
		radius: number;
		opacity: number;
		velocityX: number;
		velocityY: number;
	}

	const stars: Star[] = [];
	const numStars = 200;

	// Inicializar estrellas
	for (let i = 0; i < numStars; i++) {
		stars.push({
			x: Math.random() * canvas.width,
			y: Math.random() * canvas.height,
			radius: Math.random() * 2 + 1,
			opacity: Math.random(),
			velocityX: (Math.random() - 0.5) * 0.5, // Velocidad en X
			velocityY: (Math.random() - 0.5) * 0.5, // Velocidad en Y
		});
	}

	// Dibujar estrellas
	function drawStars() {
		ctx.clearRect(0, 0, canvas.width, canvas.height);

		stars.forEach((star) => {
			// Dibujar la estrella
			ctx.beginPath();
			ctx.arc(star.x, star.y, star.radius, 0, Math.PI * 2);
			ctx.fillStyle = `rgba(255, 255, 255, ${star.opacity})`;
			ctx.fill();
			ctx.closePath();

			// Actualizar posiciÃ³n
			star.x += star.velocityX;
			star.y += star.velocityY;

			// Rebotar en los bordes
			if (star.x < 0 || star.x > canvas.width) star.velocityX *= -1;
			if (star.y < 0 || star.y > canvas.height) star.velocityY *= -1;

			// Parpadeo
			star.opacity += Math.random() * 0.02 - 0.01;
			star.opacity = Math.max(0.1, Math.min(1, star.opacity));
		});

		requestAnimationFrame(drawStars);
	}

	// Ajustar tamaÃ±o del lienzo al redimensionar
	window.addEventListener("resize", () => {
		canvas.width = window.innerWidth;
		canvas.height = window.innerHeight;
	});

	drawStars();
</script>
